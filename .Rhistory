install.packages('bnlearn')
install.packages('devtools')
require(devtools)
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "dull", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","hello","mince")
df=data.frame(x,y,z1,z2)
# df=read.csv("sample_asia.csv")
# for(i in 1:ncol(df)){
#   df[,i] <- as.factor(df[,i])
# }
ci.test('x','y','z1','z2',df,debug=TRUE,test="x2")
require (bnlearn)
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "dull", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","hello","mince")
df=data.frame(x,y,z1,z2)
# df=read.csv("sample_asia.csv")
# for(i in 1:ncol(df)){
#   df[,i] <- as.factor(df[,i])
# }
ci.test('x','y','z1','z2',df,debug=TRUE,test="x2")
require (bnlearn)
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "dull", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","hello","mince")
df=data.frame(x,y,z1,z2)
ci.test('x','y','z1',df,debug=TRUE,test="x2")
ci.test('x','y','z1',df,test="x2")
names(ci.test('x','y','z1',df,test="x2"))
ci.test('x','y','z1',df,test="x2")$p.value
ci.test('x','y','z1',df,test="x2")$statistic
resultat=ci.test('x','y','z1',df,test="x2")
print(resultat)
resultat$statistic
resultat$p.value
resultat$method
resultat$null.value
resultat$alternative
resultat$data.name
resultat$parameter
f <- function(x,y ,z=c(), df,test) {
resultat=ci.test(x=x,y=y,z=z,data=df,test=test)
return (c(as.integer(resultat$statistic),as.integer(resultat$p.value)))
}
resultat=f('x','y','z1',df,test="x2")
print(resultat)
f <- function(x,y ,z=c(), df,test) {
resultat=ci.test(x=x,y=y,z=z,data=df,test=test)
return (c(as.numeric(resultat$statistic),as.numeric(resultat$p.value)))
}
resultat=f('x','y','z1',df,test="x2")
resultat
resultat=f('x','y',c('z1','z2'),df,test="x2")
print(resultat)
df
df['x']
df[:,'x']
df[1,2]
sum(is.na(df))
df$y
plot(df$y~df$x)
require(devtools)
install_github("https://github.com/bastienchassagnol/bnlearn-clone-3.4")
install_github("https://github.com/bastienchassagnol/bnlearn-clone-3.4")
require(devtools)
install_github("https://github.com/bastienchassagnol/bnlearn-clone-3.4")
require(bnlearn)
ci.test
f <- function(x,y ,z=c(), df,test) {
resultat=ci.test(x=x,y=y,z=z,data=df,test=test)
return (c(as.numeric(resultat$statistic),as.numeric(resultat$p.value)))
}
resultat=f('x','y',c('z1','z2'),df,test="x2")
install.packages('bnlearn')
install.packages("bnlearn")
install.packages("bnlearn")
require(devtools)
install_github("https://github.com/bastienchassagnol/bnlearn-clone-3.4")
install_github("https://github.com/bastienchassagnol/bnlearn-clone-3.4")
require(devtools)
install.packages('bnnlearn')
install.packages('bnlearn')
z=c()
z=c()
if (z) {
print("hello")
}
z=c()
if (is.null(z)) {
print("hello")
}
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "dull", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","hello","mince")
df=data.frame(x,y,z1,z2)
# df=read.csv("sample_asia.csv")
# for(i in 1:ncol(df)){
#   df[,i] <- as.factor(df[,i])
# }
sum(is.na(df))
f <- function(x,y ,z=c(), df,test) {
resultat=ci.test(x=x,y=y,z=z,data=df,test=test)
return (c(as.numeric(resultat$statistic),as.numeric(resultat$p.value)))
}
resultat=f('x','y',c('z1','z2'),df,test="x2")
require (bnlearn)
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "dull", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","hello","mince")
df=data.frame(x,y,z1,z2)
# df=read.csv("sample_asia.csv")
# for(i in 1:ncol(df)){
#   df[,i] <- as.factor(df[,i])
# }
sum(is.na(df))
f <- function(x,y ,z=c(), df,test) {
resultat=ci.test(x=x,y=y,z=z,data=df,test=test)
return (c(as.numeric(resultat$statistic),as.numeric(resultat$p.value)))
}
resultat=f('x','y',c('z1','z2'),df,test="x2")
resultat=f('x','y',c('z1','z2'),df,test="x2")
resultat
resultat=f('x','y',c('z1','z2'),df,test="x22")
x=c("foo", "bar", "foo", "foo", "bar", "bar")
y=c("one", "two", "one", "two", "one","two")
z1=c("dull", "shiny", "shiny", "dull", "shiny","shiny")
z2=c("hello","hello","hello","hello","mince","mince")
df=data.frame(x,y,z1,z2)
print(df['x'])
2.7*10^-6
-1.53*10*-5>-9.86*10^-7
-3.78*10*-5<-2*10^-6
-3.78*10^-5<-2*10^-6
-3.78*10^-5 < -2*10^-6
-10^-5> --10^-7
-10^-5> -10^-7
-1.53*10*-5> -9.86*10^-7
-1.53*10^-5> -9.86*10^-7
install.packages('bnlearn')
require(bnlearn)
graphviz.plot()
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[A|B:C][B][C]")
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[A|B:C][B][C]")
graphviz.plot(dag2)
example(layoutGraph)
biocLite('Rgraphviz')
install.packages('biocLite')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
graphviz.plot()
biocLite('Rgraphviz')
require(BiocVersion)
BiocVersion::
source("https://bioconductor.org/biocLite.R")
BiocManager::install(Bioconductor)
BiocManager::install('Bioconductor')
BiocManager::install("Rgraphviz")
library(‘Rgraphviz’)
library('Rgraphviz')
graphviz.plot(dag2)
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[A|B:C][B][C]")
graphviz.plot(cpdag(dag2))
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[A|B:C][B][C]")
graphviz.plot(cpdag(dag1))
graphviz.plot(dag1)
graphviz.plot(dag2)
graphviz.plot(dag1)
graphviz.plot(dag2)
dag1 = model2network("[A][B|A][C|A][D|C]")
dag2 = model2network("[A|B:C][B][C|D][D]")
graphviz.compare(dag1,dag2)
par(mfrow = c(2, 1))
dag1 = model2network("[A][B|A][C|A][D|C]")
dag2 = model2network("[A|B:C][B][C|D][D]")
graphviz.compare(dag1,dag2)
par(mfrow = c(2, 1))
dag1 = model2network("[A][B|A][C|A][D|C]")
dag2 = model2network("[A|B:C][B][C|D][D]")
graphviz.compare(cpdag(dag1),cpdag(dag2))
shd(cpdag(dag1),cpdag(dag2))
dag3 = model2network("[A][B|A][C|B]")
dag4 = model2network("[C][B|C][A|C]")
graphviz.compare(cpdag(dag3),cpdag(dag4))
dag3 = model2network("[A][B|A][C|B]")
dag4 = model2network("[C][B|C][A|B]")
graphviz.compare(cpdag(dag3),cpdag(dag4))
dag4 = model2network("[C][B|C][A|C]")
graphviz.plot(dag4)
graphviz.plot(dag3)
shd(cpdag(dag3),cpdag(dag4))
graphviz.plot(cpdag(dag3))
graphviz.plot(cpdag(dag4))
graphviz.compare(cpdag(dag3),cpdag(dag4))
hamming(dag3,dag4)
par(mfrow = c(2, 1))
require(bnlearn)
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[B][C][A|B:C]")
graphviz.plot(dag1,dag2)
shd(dag1,dag2)
par(mfrow = c(2, 1))
require(bnlearn)
dag1 = model2network("[A][B|A][C|A]")
dag2 = model2network("[B][C][A|B:C]")
graphviz.plot(dag1)
shd(dag1,dag2)
par(mfrow = c(2, 1))
dag1 = model2network("[A][B|A][C|A][D|C]")
dag2 = model2network("[A|B:C][B][C|D][D]")
graphviz.compare(cpdag(dag1),cpdag(dag2))
shd(dag1,dag2)
par(mfrow = c(2, 1))
dag1 = model2network("[A][B|A][C|A][D|C]")
dag2 = model2network("[A|B:C][B][C|D][D]")
graphviz.compare(cpdag(dag1),cpdag(dag2))
shd(cpdag(dag1),cpdag(dag2))
graphviz.plot(dag1)
graphviz.plot(dag2)
graphviz.compare(cpdag(dag1),cpdag(dag2))
5*sum(1/(1:5))
sum(1/(1:5)
sum(1/(1:5))
1+1/2+1/3+1/4+1/5
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
require(bnlearn)
liste_graphes=list.files(path = "true_graphes_structures")
score_measured=c('recall','precision','dist2opt','specificity','hamming','shd','bic_train','aic_train','aic_test','bic_test')
algorithms=c('hpc')
sample_size=c(500,1000,2000,5000,10000,20000,50000)
for (graph in liste_graphes) {
cat("we learn following graph ", graph)
learn_scores(graph,sample_size,score_measured=score_measured,algorithms=algorithms,n_splits=10,nsamples=30,restrict.args=list(test="x2",debug=TRUE))
}
temp_database
require(bnlearn)
liste_graphes=list.files(path = "true_graphes_structures")
score_measured=c('recall','precision','dist2opt','specificity','hamming','shd','bic_train','aic_train','aic_test','bic_test')
algorithms=c('hpc')
sample_size=c(500,1000,2000,5000,10000,20000,50000)
for (graph in liste_graphes) {
cat("we learn following graph ", graph)
learn_scores(graph,sample_size,score_measured=score_measured,algorithms=algorithms,n_splits=10,nsamples=30,restrict.args=list(test="x2",debug=TRUE))
}
temp_database
View(temp_database)
force(restrict.args)
View(dag1)
View(df)
rm(df)
rm(dag1)
rm(dag2)
rm(dag3)
rm(dag4)
hpc
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
warnings()
dag_alarm=read.bif("true_graphes_structures/alarm.bif")
class(dag_alarm)
bn.net(dag_alarm)
dag_seul=bn.net(dag_alarm)
class(dag_seul)
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
nnodes
nodes
compte=c(compte,tn=num_nodes*(num_nodes-1)-compte$tp-compte$fp-compte$fn)
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
warnings()
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(df_proba)
View(bn_learnt)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(df_proba)
View(df_proba)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(df_proba)
View(test_score)
View(train_score)
alarm
autre_dataset=alarm
autre_dataset
autre_dataset=alarm
autre_dataset
colnames(autre_dataset)
alarm[1,2]=20
alarm[1,2]="ERR"
alarm[1,2]="HIGH"
head(alarm)
head(autre_dataset)
liste=c(a=20,b=30)
liste=c(a=20,b=30)
df=as.data.frame(liste)
df
liste=list(a=20,b=30)
df=as.data.frame(liste)
df
colMeans(df)
as.data.frame(colMeans(df))
as.data.frame(as.list(colMeans(df)))
liste=list(a=20,paste(b,"train")=10)
var=paste(b,"train")
liste=list(a=20,var=10)
liste
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(df_proba)
View(test_score)
View(train_score)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(proba.list)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(proba.list)
var=paste(b,"train")
liste=list(a=20,var=10)
liste
paste(b,"train")
paste("hello","train")
var=as.symbol(paste("hello","train"))
var
var=as.symbol(paste("hello","train"))
liste=list(a=20,var=10)
liste
liste=list(a=20,as.symbol(paste("hello","train"))=10)
liste=list(a=20,'hello'=10)
liste
liste$hello
assign("hello", 5)
assign(var, parse("hello",20))
rm(hello)
values=c("a","b","c")
liste=list()
for (a in values) {
liste(a=20)
}
values=c("a","b","c")
liste=list()
for (a in values) {
liste=c(liste,a=20)
}
liste
xx=c("a","b","c")
yy=c(20,30,50)
liste=as.list(setNames(xx, yy))
liste
xx=c("a","b","c")
yy=c(20,30,50)
liste=as.list(setNames(yy, xx))
liste
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(temp)
View(temp)
View(df_proba)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
warnings()
rsmax2(alarm, restrict = "hpc", maximize = "tabu", restrict.args = list(test="x2",pc.method="fdr.iamb"), maximize.args = list(tabu = 100, max.tabu = 20) )
rsmax2
rsmax2(alarm, restrict = "hpc", maximize = "tabu", restrict.args = list(test="x2",alpha=0.05), maximize.args = list(tabu = 100, max.tabu = 20) )
rsmax2(alarm, restrict = "hpc", maximize = "tabu", restrict.args = list(test="x2"), maximize.args = list(tabu = 100, max.tabu = 20) )
rsmax2
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
write.csv(alarm,file=file.path("scores",sub("^([^.]*).*", "\\1", "alarm.bif")),write.names=FALSE)
write.csv(alarm,file=file.path("scores",sub("^([^.]*).*", "\\1", "alarm.bif")),row.names=FALSE)
nom=sub("^([^.]*).*", "\\1", "alarm.bif")
write.csv(alarm,file=file.path("scores",nom),row.names=FALSE,quote=FALSE)
nom=paste(sub("^([^.]*).*", "\\1", "alarm.bif"),"csv",sep=".")
write.csv(alarm,file=file.path("scores",nom),row.names=FALSE,quote=FALSE)
hpc
h2pc
mmhc
h2pc
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
rm(alarm)
rm(df)
rm(autre_dataset)
rm(liste)
rm(dag_seul)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(temp)
View(data.set)
View(data.set)
*
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
View(df_proba)
debugSource('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
source('C:/Users/Bastien/Documents/stage_projet_bayesian_network-20190516T081042Z-001/ancien_programme_r/benchmark.R')
warnings()
